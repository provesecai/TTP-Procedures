<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
<graph id="PythonRCEWebInjectionDjango" edgedefault="directed">
<!-- Nodes -->
<node id="A">
<data key="label">Initial Foothold Gained</data>
</node>
<node id="B">
<data key="label">Prepare for Django Exploitation</data>
</node>
<node id="C">
<data key="label">Inject Malicious Python Code</data>
</node>
<node id="D">
<data key="label">Execute Code on Django Server</data>
</node>
<node id="E">
<data key="label">Python RCE Execution Achieved</data>
</node>
<!-- Edges -->
<edge source="A" target="B">
<data key="label">Access gained via SQL injection in Django-based web app Corporate Control: Web Application Firewall</data>
</edge>
<edge source="A" target="B">
<data key="label">Exploit Django admin panel misconfiguration Corporate Control: Web Application IAM</data>
</edge>
<edge source="A" target="B">
<data key="label">Foothold established by injecting malicious Python commands Corporate Control: Django Backend</data>
</edge>
<edge source="A" target="B">
<data key="label">Detection possible through real-time WAF monitoring Corporate Control: Network Logs</data>
</edge>
<edge source="B" target="C">
<data key="label">Craft Python script for reverse shell payload Corporate Control: Script Repository</data>
</edge>
<edge source="B" target="C">
<data key="label">Embed script into Django templates to execute server-side Corporate Control: Django Templating Engine</data>
</edge>
<edge source="B" target="C">
<data key="label">Obfuscate Python payloads using base64 encoding Corporate Control: Application Logs</data>
</edge>
<edge source="B" target="C">
<data key="label">Monitor for template modifications within the app Corporate Control: File Integrity Monitoring</data>
</edge>
<edge source="C" target="D">
<data key="label">Trigger execution via manipulated HTTP POST requests Corporate Control: Django Request Handler</data>
</edge>
<edge source="C" target="D">
<data key="label">Payload establishes outbound connection to attacker C2 Corporate Control: Network Firewall</data>
</edge>
<edge source="C" target="D">
<data key="label">Avoid detection by mimicking legitimate Django API requests Corporate Control: Web Traffic Logs</data>
</edge>
<edge source="C" target="D">
<data key="label">Monitor for unusual behavior in Django view functions Corporate Control: Application Security Tools</data>
</edge>
<edge source="D" target="E">
<data key="label">Reverse shell successfully connects to attacker C2 server Corporate Control: Network Monitoring</data>
</edge>
<edge source="D" target="E">
<data key="label">Payload allows further exploitation of the server Corporate Control: Target System</data>
</edge>
<edge source="D" target="E">
<data key="label">Execution achieves attacker control over Django server Corporate Control: Web Application Infrastructure</data>
</edge>
<edge source="D" target="E">
<data key="label">Detection possible by correlating outbound traffic with payload triggers Corporate Control: SIEM Systems</data>
</edge>
</graph>
</graphml>