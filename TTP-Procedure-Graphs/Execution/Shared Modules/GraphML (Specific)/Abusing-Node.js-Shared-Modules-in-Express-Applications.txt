<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
<graph id="AbusingNodeJsSharedModulesInExpressApplications" edgedefault="directed">
<!-- Nodes -->
<node id="A">
<data key="label">InitialAccess</data>
</node>
<node id="B">
<data key="label">PostAccessPreparation</data>
</node>
<node id="C">
<data key="label">PayloadDelivery</data>
</node>
<node id="D">
<data key="label">PreExecutionSetup</data>
</node>
<node id="E">
<data key="label">ExecutionAchieved</data>
</node>
<!-- Edges -->
<edge source="A" target="B">
<data key="label">Access gained via exploiting a vulnerable Express API endpoint Corporate Control: API Gateway Logs</data>
</edge>
<edge source="A" target="B">
<data key="label">Enumerate shared modules in the Node.js project Corporate Control: Package.json Files</data>
</edge>
<edge source="A" target="B">
<data key="label">Monitor for unauthorized access to project files Corporate Control: SIEM Alerts</data>
</edge>
<edge source="A" target="B">
<data key="label">Detect anomalies in npm installation activities Corporate Control: Behavioral Analytics</data>
</edge>
<edge source="B" target="C">
<data key="label">Craft a malicious Node.js module mimicking a legitimate dependency Corporate Control: Development Environment</data>
</edge>
<edge source="B" target="C">
<data key="label">Validate malicious moduleâ€™s compatibility with the Express runtime Corporate Control: Test Environment Logs</data>
</edge>
<edge source="B" target="C">
<data key="label">Ensure malicious logic avoids triggering runtime exceptions Corporate Control: Endpoint Detection Systems</data>
</edge>
<edge source="B" target="C">
<data key="label">Monitor for unauthorized modifications to package dependencies Corporate Control: File Integrity Monitoring</data>
</edge>
<edge source="C" target="D">
<data key="label">Replace legitimate module with the crafted malicious module in the project Corporate Control: File System Logs</data>
</edge>
<edge source="C" target="D">
<data key="label">Ensure metadata mimics the original module Corporate Control: npm Registry Logs</data>
</edge>
<edge source="C" target="D">
<data key="label">Monitor for anomalies in dependency updates Corporate Control: Behavioral Analytics</data>
</edge>
<edge source="D" target="E">
<data key="label">Trigger Express application execution to load the malicious module Corporate Control: Application Logs</data>
</edge>
<edge source="D" target="E">
<data key="label">Monitor runtime for unexpected behaviors Corporate Control: SIEM Systems</data>
</edge>
<edge source="D" target="E">
<data key="label">Malicious module executes as part of the Express application Corporate Control: Execution Logs</data>
</edge>
<edge source="D" target="E">
<data key="label">Detect unauthorized network activity from the Node.js runtime Corporate Control: Behavioral Monitoring</data>
</edge>
</graph>
</graphml>
