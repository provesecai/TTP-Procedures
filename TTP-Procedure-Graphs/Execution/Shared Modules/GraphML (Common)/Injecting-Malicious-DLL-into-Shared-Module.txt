<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
<graph id="InjectingMaliciousDLLIntoSharedModule" edgedefault="directed">
<!-- Nodes -->
<node id="A">
<data key="label">InitialAccess</data>
</node>
<node id="B">
<data key="label">PostAccessPreparation</data>
</node>
<node id="C">
<data key="label">PayloadDelivery</data>
</node>
<node id="D">
<data key="label">PreExecutionSetup</data>
</node>
<node id="E">
<data key="label">ExecutionAchieved</data>
</node>
<!-- Edges -->
<edge source="A" target="B">
<data key="label">Access gained via phishing attack delivering exploit script Corporate Control: Email Gateway Logs</data>
</edge>
<edge source="A" target="B">
<data key="label">Enumerate shared modules and associated DLLs Corporate Control: Application Dependency Files</data>
</edge>
<edge source="A" target="B">
<data key="label">Identify writable DLLs within shared modules Corporate Control: File System Permissions</data>
</edge>
<edge source="A" target="B">
<data key="label">Monitor for unauthorized enumeration activities Corporate Control: SIEM Alerts</data>
</edge>
<edge source="B" target="C">
<data key="label">Craft a malicious DLL designed to hijack shared module functionality Corporate Control: Development Environment</data>
</edge>
<edge source="B" target="C">
<data key="label">Ensure DLL exports mimic legitimate module functions Corporate Control: Dependency Configurations</data>
</edge>
<edge source="B" target="C">
<data key="label">Obfuscate payload to bypass runtime integrity checks Corporate Control: Endpoint Protection Tools</data>
</edge>
<edge source="B" target="C">
<data key="label">Monitor for unauthorized modifications to shared module files Corporate Control: File Integrity Monitoring</data>
</edge>
<edge source="C" target="D">
<data key="label">Inject DLL into shared module for application use Corporate Control: Deployment Logs</data>
</edge>
<edge source="C" target="D">
<data key="label">Test application execution with modified DLL Corporate Control: Test Environment Logs</data>
</edge>
<edge source="C" target="D">
<data key="label">Monitor for unexpected changes to shared module dependencies Corporate Control: Behavioral Monitoring</data>
</edge>
<edge source="D" target="E">
<data key="label">Trigger application to load the shared module with injected DLL Corporate Control: Application Execution Logs</data>
</edge>
<edge source="D" target="E">
<data key="label">Detect runtime deviations during module execution Corporate Control: Behavioral Analytics</data>
</edge>
<edge source="D" target="E">
<data key="label">Malicious code executes via the injected DLL Corporate Control: Execution Logs</data>
</edge>
<edge source="D" target="E">
<data key="label">Monitor for unauthorized API calls or outbound network traffic Corporate Control: SIEM Systems</data>
</edge>
</graph>
</graphml>
