<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
<graph id="Database-Backdoor-Injection" edgedefault="directed">
<!--  Nodes  -->
<node id="A">
<data key="label">Identify Target Database System</data>
</node>
<node id="B">
<data key="label">Inject Malicious SQL Triggers or Stored Procedures</data>
</node>
<node id="C">
<data key="label">Ensure Persistent Execution on Database Events</data>
</node>
<node id="D">
<data key="label">Prevent Detection of Malicious Database Modifications</data>
</node>
<node id="E">
<data key="label">Persistence Achieved via Database Backdoor Injection</data>
</node>
<!--  Edges with Conditions  -->
<edge source="A" target="B">
<data key="label">Analyze database type (MySQL, MSSQL, PostgreSQL, Oracle) Corporate Control: Database Security Policies</data>
</edge>
<edge source="A" target="B">
<data key="label">Identify permissions for stored procedures and triggers Corporate Control: Database Access Control</data>
</edge>
<edge source="A" target="B">
<data key="label">Determine vulnerability points in SQL authentication Corporate Control: Database Query Logs</data>
</edge>
<edge source="A" target="B">
<data key="label">Monitor database modification logs for unauthorized changes Corporate Control: SIEM, Database Audit Logs</data>
</edge>
<edge source="B" target="C">
<data key="label">Create hidden stored procedures with embedded backdoor commands Corporate Control: Database Management System</data>
</edge>
<edge source="B" target="C">
<data key="label">Inject SQL triggers that execute attacker commands on database updates Corporate Control: Database Event Triggers</data>
</edge>
<edge source="B" target="C">
<data key="label">Ensure persistence by modifying database system tables Corporate Control: Database Schema Configuration</data>
</edge>
<edge source="B" target="C">
<data key="label">Monitor unauthorized stored procedure executions Corporate Control: Database Activity Monitoring (DAM)</data>
</edge>
<edge source="C" target="D">
<data key="label">Modify database triggers dynamically to evade security scans Corporate Control: Database Security Policies</data>
</edge>
<edge source="C" target="D">
<data key="label">Ensure malicious SQL code executes across database updates Corporate Control: Database Patch Management</data>
</edge>
<edge source="C" target="D">
<data key="label">Prevent removal of backdoor by restricting admin access Corporate Control: Access Control Lists (ACLs)</data>
</edge>
<edge source="C" target="D">
<data key="label">Monitor database performance for anomalies Corporate Control: Database Security Intelligence</data>
</edge>
<edge source="D" target="E">
<data key="label">Encrypt stored procedures and triggers to evade detection Corporate Control: SQL Encryption Techniques</data>
</edge>
<edge source="D" target="E">
<data key="label">Modify database logs to remove evidence of backdoor execution Corporate Control: Database Log Management</data>
</edge>
<edge source="D" target="E">
<data key="label">Deploy redundant database persistence mechanisms Corporate Control: Multiple SQL Injection Points</data>
</edge>
<edge source="D" target="E">
<data key="label">SOC continuously monitors database activity for anomalies Corporate Control: Security Operations Center (SOC)</data>
</edge>
</graph>
</graphml>
