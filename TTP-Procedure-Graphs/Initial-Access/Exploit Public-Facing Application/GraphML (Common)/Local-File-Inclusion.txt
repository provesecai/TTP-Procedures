<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
<graph id="LFI" edgedefault="directed">
<!-- Nodes -->
<node id="A">
<data key="label">Locate LFI Vulnerability</data>
</node>
<node id="B">
<data key="label">Inject Malicious Path</data>
</node>
<node id="C">
<data key="label">Web Server Executes Local File</data>
</node>
<node id="D">
<data key="label">File Delivers Malicious Payload</data>
</node>
<node id="E">
<data key="label">Initial Access Achieved</data>
</node>
<!-- Edges -->
<edge source="A" target="B">
<data key="label">Identify local file inclusion vulnerability Corporate Control: Web Application</data>
</edge>
<edge source="A" target="B">
<data key="label">Focus on file path manipulation Corporate Control: File Handling</data>
</edge>
<edge source="A" target="B">
<data key="label">Use tools to scan for endpoints with file inclusion Corporate Control: Vulnerability Scanners</data>
</edge>
<edge source="A" target="B">
<data key="label">Check for directories exposed to attackers Corporate Control: Directory Listings</data>
</edge>
<edge source="B" target="C">
<data key="label">Inject paths pointing to sensitive local files Corporate Control: Input Fields</data>
</edge>
<edge source="B" target="C">
<data key="label">Leverage traversal techniques to escape directories Corporate Control: File Path Traversal</data>
</edge>
<edge source="B" target="C">
<data key="label">Ensure injection bypasses application filters Corporate Control: Input Validation</data>
</edge>
<edge source="B" target="C">
<data key="label">Use payloads to test inclusion vulnerabilities Corporate Control: File Inclusion Testing</data>
</edge>
<edge source="C" target="D">
<data key="label">Trigger execution of included local file Corporate Control: Server Execution</data>
</edge>
<edge source="C" target="D">
<data key="label">Monitor server responses for vulnerability signs Corporate Control: Server Responses</data>
</edge>
<edge source="C" target="D">
<data key="label">Use trial-and-error to refine injected paths Corporate Control: Path Refinement</data>
</edge>
<edge source="C" target="D">
<data key="label">Payload delivers exploit or shell code Corporate Control: Malicious Payload</data>
</edge>
<edge source="D" target="E">
<data key="label">File executes malicious commands Corporate Control: Execution</data>
</edge>
<edge source="D" target="E">
<data key="label">Initial access to server achieved Corporate Control: Server Access</data>
</edge>
<edge source="D" target="E">
<data key="label">Monitor server logs for abnormal file usage Corporate Control: Logging Systems</data>
</edge>
<edge source="D" target="E">
<data key="label">Patch identified vulnerabilities Corporate Control: Security Updates</data>
</edge>
</graph>
</graphml>
