<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
<graph id="RFI" edgedefault="directed">
<!-- Nodes -->
<node id="A">
<data key="label">Locate RFI Vulnerability</data>
</node>
<node id="B">
<data key="label">Host Malicious File on Remote Server</data>
</node>
<node id="C">
<data key="label">Inject URL of Malicious File</data>
</node>
<node id="D">
<data key="label">Web Application Loads Malicious File</data>
</node>
<node id="E">
<data key="label">Initial Access Achieved</data>
</node>
<!-- Edges -->
<edge source="A" target="B">
<data key="label">Identify file inclusion vulnerability in application Corporate Control: Web Application</data>
</edge>
<edge source="A" target="B">
<data key="label">Focus on improperly sanitized file paths Corporate Control: Input Validation</data>
</edge>
<edge source="A" target="B">
<data key="label">Determine if application supports remote file retrieval Corporate Control: File Handling</data>
</edge>
<edge source="A" target="B">
<data key="label">Use tools to scan for vulnerable endpoints Corporate Control: Endpoint Scanning</data>
</edge>
<edge source="B" target="C">
<data key="label">Host malicious script or shell on external server Third Party Control: Attacker Server</data>
</edge>
<edge source="B" target="C">
<data key="label">Ensure hosted file is undetectable by common scans Third Party Control: File Obfuscation</data>
</edge>
<edge source="B" target="C">
<data key="label">Set up server to log connections Corporate Control: Server Monitoring</data>
</edge>
<edge source="B" target="C">
<data key="label">Craft file to execute on vulnerable platforms Corporate Control: Script Compatibility</data>
</edge>
<edge source="C" target="D">
<data key="label">Inject URL of hosted file into vulnerable input Corporate Control: Input Handling</data>
</edge>
<edge source="C" target="D">
<data key="label">Ensure proper URL encoding to bypass filters Third Party Control: URL Encoding</data>
</edge>
<edge source="C" target="D">
<data key="label">Monitor responses to detect successful file loading Corporate Control: Response Logs</data>
</edge>
<edge source="C" target="D">
<data key="label">Use multiple payloads to ensure execution Corporate Control: Payload Diversification</data>
</edge>
<edge source="D" target="E">
<data key="label">Malicious file is executed on the server Corporate Control: File Execution</data>
</edge>
<edge source="D" target="E">
<data key="label">Establish a reverse shell or execute commands Third Party Control: Remote Shell</data>
</edge>
<edge source="D" target="E">
<data key="label">Initial access to server achieved Corporate Control: Server Compromise</data>
</edge>
<edge source="D" target="E">
<data key="label">Monitor network traffic for unexpected connections Corporate Control: Network Logs</data>
</edge>
</graph>
</graphml>
