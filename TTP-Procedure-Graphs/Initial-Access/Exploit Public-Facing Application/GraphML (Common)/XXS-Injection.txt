<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
<graph id="XXSInjection" edgedefault="directed">
<!-- Nodes -->
<node id="A">
<data key="label">Identify Vulnerable Web Application</data>
</node>
<node id="B">
<data key="label">Inject Malicious XSS Script</data>
</node>
<node id="C">
<data key="label">Victim Interacts with Compromised Page</data>
</node>
<node id="D">
<data key="label">Execute Script in Victim's Browser</data>
</node>
<node id="E">
<data key="label">Initial Access Achieved</data>
</node>
<!-- Edges -->
<edge source="A" target="B">
<data key="label">Scan for input validation flaws Corporate Control: Web Application</data>
</edge>
<edge source="A" target="B">
<data key="label">Enumerate exposed parameters vulnerable to XSS Third Party Control: Browser Input</data>
</edge>
<edge source="A" target="B">
<data key="label">Map potential injection points in web app Corporate Control: Web Pages</data>
</edge>
<edge source="A" target="B">
<data key="label">Avoid detection by testing payloads incrementally Corporate Control: Web Server Logs</data>
</edge>
<edge source="B" target="C">
<data key="label">Inject malicious script via vulnerable parameters Corporate Control: Input Field</data>
</edge>
<edge source="B" target="C">
<data key="label">Use encoded payloads to bypass input sanitization Corporate Control: Web Application</data>
</edge>
<edge source="B" target="C">
<data key="label">Test execution of payloads in various user contexts Corporate Control: Application Servers</data>
</edge>
<edge source="B" target="C">
<data key="label">Maintain persistence of injection via obfuscation Corporate Control: Injected Code</data>
</edge>
<edge source="C" target="D">
<data key="label">Victim unknowingly triggers the malicious code Third Party Control: Victim Browser</data>
</edge>
<edge source="C" target="D">
<data key="label">Exploit user session to execute payload Third Party Control: Active Session</data>
</edge>
<edge source="C" target="D">
<data key="label">Script captures sensitive information Third Party Control: User Inputs</data>
</edge>
<edge source="C" target="D">
<data key="label">Monitor and log payload interactions for refinement Corporate Control: Attack Infrastructure</data>
</edge>
<edge source="D" target="E">
<data key="label">Payload executes in victimâ€™s browser Third Party Control: Victim Browser</data>
</edge>
<edge source="D" target="E">
<data key="label">Keylogging or credential theft methods used Third Party Control: Victim Input</data>
</edge>
<edge source="D" target="E">
<data key="label">Initial access achieved through stolen session tokens Third Party Control: User Session</data>
</edge>
<edge source="D" target="E">
<data key="label">Monitor for suspicious data exfiltration Corporate Control: Network Monitoring</data>
</edge>
</graph>
</graphml>
