<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
<graph id="SQLInjection" edgedefault="directed">
<!-- Nodes -->
<node id="A">
<data key="label">Identify SQL Injection Point</data>
</node>
<node id="B">
<data key="label">Craft Malicious SQL Query</data>
</node>
<node id="C">
<data key="label">Deploy Query Through Input Field</data>
</node>
<node id="D">
<data key="label">Extract Sensitive Information</data>
</node>
<node id="E">
<data key="label">Initial Access Achieved</data>
</node>
<!-- Edges -->
<edge source="A" target="B">
<data key="label">Locate vulnerable input fields in web applications Corporate Control: Web Application</data>
</edge>
<edge source="A" target="B">
<data key="label">Verify lack of parameterized queries Corporate Control: Backend Server</data>
</edge>
<edge source="A" target="B">
<data key="label">Ensure application does not properly sanitize input Corporate Control: Input Validation</data>
</edge>
<edge source="A" target="B">
<data key="label">Focus on high-value target databases Corporate Control: Database System</data>
</edge>
<edge source="B" target="C">
<data key="label">Create SQL query to extract user credentials Corporate Control: Database Query</data>
</edge>
<edge source="B" target="C">
<data key="label">Test crafted queries to bypass input sanitization Corporate Control: Vulnerability Testing</data>
</edge>
<edge source="B" target="C">
<data key="label">Use SQL functions to encode or obfuscate queries Third Party Control: SQL Syntax</data>
</edge>
<edge source="B" target="C">
<data key="label">Craft queries to avoid detection by WAF Corporate Control: Web Firewall</data>
</edge>
<edge source="C" target="D">
<data key="label">Deploy query through vulnerable input field Corporate Control: Input Handling</data>
</edge>
<edge source="C" target="D">
<data key="label">Ensure query does not raise alerts Corporate Control: Monitoring Systems</data>
</edge>
<edge source="C" target="D">
<data key="label">Extract sensitive data to attacker-controlled location Corporate Control: Data Exfiltration</data>
</edge>
<edge source="C" target="D">
<data key="label">Evaluate the query success rate and refine Corporate Control: Iterative Testing</data>
</edge>
<edge source="D" target="E">
<data key="label">Gain access to credentials or sensitive data Corporate Control: Credential Store</data>
</edge>
<edge source="D" target="E">
<data key="label">Initial access to backend systems achieved Corporate Control: Backend Systems</data>
</edge>
<edge source="D" target="E">
<data key="label">Monitor for unexpected spikes in database queries Corporate Control: Query Logs</data>
</edge>
<edge source="D" target="E">
<data key="label">Patch vulnerabilities identified during attack Corporate Control: Security Patching</data>
</edge>
</graph>
</graphml>
