<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
<graph id="RFI_PHP" edgedefault="directed">
<!-- Nodes -->
<node id="A">
<data key="label">Identify RFI Vulnerability in PHP Application</data>
</node>
<node id="B">
<data key="label">Host Malicious Script on Attacker Server</data>
</node>
<node id="C">
<data key="label">Inject URL of Malicious Script in Input Field</data>
</node>
<node id="D">
<data key="label">PHP Server Executes Malicious Script</data>
</node>
<node id="E">
<data key="label">Initial Access Achieved</data>
</node>
<!-- Edges -->
<edge source="A" target="B">
<data key="label">Discover PHP file inclusion misconfigurations Corporate Control: Web Application</data>
</edge>
<edge source="A" target="B">
<data key="label">Scan for input fields accepting file paths Corporate Control: Input Handling</data>
</edge>
<edge source="A" target="B">
<data key="label">Identify lack of file path sanitization Corporate Control: Path Validation</data>
</edge>
<edge source="A" target="B">
<data key="label">Focus on applications loading remote files Corporate Control: File Handling</data>
</edge>
<edge source="B" target="C">
<data key="label">Host backdoor script or shell on attacker-controlled server Third Party Control: Attacker Infrastructure</data>
</edge>
<edge source="B" target="C">
<data key="label">Ensure script bypasses malware detection Third Party Control: Obfuscation Techniques</data>
</edge>
<edge source="B" target="C">
<data key="label">Log all connections to the hosted script Corporate Control: Access Logs</data>
</edge>
<edge source="B" target="C">
<data key="label">Craft file for PHP compatibility and execution Corporate Control: Compatibility Testing</data>
</edge>
<edge source="C" target="D">
<data key="label">Inject URL into vulnerable input field Corporate Control: Input Fields</data>
</edge>
<edge source="C" target="D">
<data key="label">Ensure input bypasses application filters Corporate Control: Filter Bypass</data>
</edge>
<edge source="C" target="D">
<data key="label">Monitor server responses for successful execution Corporate Control: Response Logs</data>
</edge>
<edge source="C" target="D">
<data key="label">Evade detection through low-noise injection techniques Corporate Control: Detection Avoidance</data>
</edge>
<edge source="D" target="E">
<data key="label">PHP server executes remote script Corporate Control: Script Execution</data>
</edge>
<edge source="D" target="E">
<data key="label">Backdoor connection established to attacker server Third Party Control: Remote Shell</data>
</edge>
<edge source="D" target="E">
<data key="label">Establish persistence for further exploitation Corporate Control: Foothold Establishment</data>
</edge>
<edge source="D" target="E">
<data key="label">Monitor traffic for anomalous activity Corporate Control: Network Logs</data>
</edge>
</graph>
</graphml>
