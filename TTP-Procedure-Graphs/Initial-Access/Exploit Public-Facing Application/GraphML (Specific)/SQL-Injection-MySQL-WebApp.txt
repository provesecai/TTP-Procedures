<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
<graph id="SQL_Injection_MySQL" edgedefault="directed">
<!-- Nodes -->
<node id="A">
<data key="label">Locate SQL Injection Point</data>
</node>
<node id="B">
<data key="label">Craft SQL Query to Dump User Credentials</data>
</node>
<node id="C">
<data key="label">Inject Query Through Login Field</data>
</node>
<node id="D">
<data key="label">Database Returns Sensitive Information</data>
</node>
<node id="E">
<data key="label">Initial Access Achieved</data>
</node>
<!-- Edges -->
<edge source="A" target="B">
<data key="label">Identify login or search fields for injection Corporate Control: Input Fields</data>
</edge>
<edge source="A" target="B">
<data key="label">Test input fields for exploitable syntax Corporate Control: Syntax Validation</data>
</edge>
<edge source="A" target="B">
<data key="label">Confirm database type as MySQL Corporate Control: Database Identification</data>
</edge>
<edge source="A" target="B">
<data key="label">Focus on high-value targets in web apps Corporate Control: Web Application</data>
</edge>
<edge source="B" target="C">
<data key="label">Craft SQL query to retrieve admin credentials Corporate Control: Query Crafting</data>
</edge>
<edge source="B" target="C">
<data key="label">Encode or obfuscate payload to bypass firewalls Corporate Control: Firewall Evasion</data>
</edge>
<edge source="B" target="C">
<data key="label">Ensure payload avoids triggering alerts Corporate Control: Alert Systems</data>
</edge>
<edge source="B" target="C">
<data key="label">Test injection in isolated environments Corporate Control: Test Systems</data>
</edge>
<edge source="C" target="D">
<data key="label">Submit query in vulnerable input field Corporate Control: Input Handling</data>
</edge>
<edge source="C" target="D">
<data key="label">Ensure query retrieves valid data from database Corporate Control: Database Query Execution</data>
</edge>
<edge source="C" target="D">
<data key="label">Monitor for query success and refine if needed Corporate Control: Query Refinement</data>
</edge>
<edge source="C" target="D">
<data key="label">Evade detection with slow-rate attacks Corporate Control: Anomaly Monitoring</data>
</edge>
<edge source="D" target="E">
<data key="label">Extract sensitive credentials from database Corporate Control: Credential Store</data>
</edge>
<edge source="D" target="E">
<data key="label">Establish access to application admin functions Corporate Control: Admin Privileges</data>
</edge>
<edge source="D" target="E">
<data key="label">Monitor database logs for unexpected queries Corporate Control: Query Logs</data>
</edge>
<edge source="D" target="E">
<data key="label">Ensure no cleanup leads to detection Corporate Control: Post-Injection Monitoring</data>
</edge>
</graph>
</graphml>
