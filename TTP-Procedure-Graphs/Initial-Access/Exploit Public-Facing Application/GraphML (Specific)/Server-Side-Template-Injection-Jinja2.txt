<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
<graph id="SSTI_Jinja2" edgedefault="directed">
<!-- Nodes -->
<node id="A">
<data key="label">Identify Template Injection in Jinja2</data>
</node>
<node id="B">
<data key="label">Inject Malicious Template Code</data>
</node>
<node id="C">
<data key="label">Trigger Execution of Template Payload</data>
</node>
<node id="D">
<data key="label">Gain Remote Code Execution</data>
</node>
<node id="E">
<data key="label">Initial Access Achieved</data>
</node>
<!-- Edges -->
<edge source="A" target="B">
<data key="label">Discover user input embedded in Jinja2 templates Corporate Control: Template Engine</data>
</edge>
<edge source="A" target="B">
<data key="label">Scan for unvalidated template expressions Corporate Control: Input Validation</data>
</edge>
<edge source="A" target="B">
<data key="label">Focus on applications directly rendering user input Corporate Control: Application Logic</data>
</edge>
<edge source="A" target="B">
<data key="label">Use automated scanners to confirm SSTI vulnerabilities Third Party Control: Vulnerability Scanners</data>
</edge>
<edge source="B" target="C">
<data key="label">Craft malicious payload exploiting Jinja2 syntax Corporate Control: Exploit Development</data>
</edge>
<edge source="B" target="C">
<data key="label">Include commands for arbitrary code execution Corporate Control: Command Injection</data>
</edge>
<edge source="B" target="C">
<data key="label">Obfuscate payload to avoid detection Third Party Control: Payload Obfuscation</data>
</edge>
<edge source="B" target="C">
<data key="label">Test payload on isolated Jinja2 environments Corporate Control: Lab Testing</data>
</edge>
<edge source="C" target="D">
<data key="label">Submit payload via vulnerable input field Corporate Control: Input Fields</data>
</edge>
<edge source="C" target="D">
<data key="label">Trigger payload execution by interacting with app Corporate Control: App Interaction</data>
</edge>
<edge source="C" target="D">
<data key="label">Monitor responses for execution success Corporate Control: Response Monitoring</data>
</edge>
<edge source="C" target="D">
<data key="label">Refine payload to improve stealth and success Corporate Control: Payload Refinement</data>
</edge>
<edge source="D" target="E">
<data key="label">Establish remote access to server Corporate Control: Remote Access</data>
</edge>
<edge source="D" target="E">
<data key="label">Ensure persistence for further exploitation Corporate Control: Persistence Mechanisms</data>
</edge>
<edge source="D" target="E">
<data key="label">Monitor application for detection attempts Corporate Control: Detection Avoidance</data>
</edge>
<edge source="D" target="E">
<data key="label">Patch SSTI vulnerabilities post-exploitation Corporate Control: Security Updates</data>
</edge>
</graph>
</graphml>
