graph TD;
    A[Identify SQL Injection Point]
    B[Craft Malicious SQL Query]
    C[Deploy Query Through Input Field]
    D[Extract Sensitive Information]
    E[Initial Access Achieved]

    A -->|"Locate vulnerable input fields in web applications Corporate Control: Web Application"| B
    A -->|"Verify lack of parameterized queries Corporate Control: Backend Server"| B
    A -->|"Ensure application does not properly sanitize input Corporate Control: Input Validation"| B
    A -->|"Focus on high-value target databases Corporate Control: Database System"| B
    B -->|"Create SQL query to extract user credentials Corporate Control: Database Query"| C
    B -->|"Test crafted queries to bypass input sanitization Corporate Control: Vulnerability Testing"| C
    B -->|"Use SQL functions to encode or obfuscate queries Third Party Control: SQL Syntax"| C
    B -->|"Craft queries to avoid detection by WAF Corporate Control: Web Firewall"| C
    C -->|"Deploy query through vulnerable input field Corporate Control: Input Handling"| D
    C -->|"Ensure query does not raise alerts Corporate Control: Monitoring Systems"| D
    C -->|"Extract sensitive data to attacker-controlled location Corporate Control: Data Exfiltration"| D
    C -->|"Evaluate the query success rate and refine Corporate Control: Iterative Testing"| D
    D -->|"Gain access to credentials or sensitive data Corporate Control: Credential Store"| E
    D -->|"Initial access to backend systems achieved Corporate Control: Backend Systems"| E
    D -->|"Monitor for unexpected spikes in database queries Corporate Control: Query Logs"| E
    D -->|"Patch vulnerabilities identified during attack Corporate Control: Security Patching"| E
