graph TD;
    A[Identify Template Injection Point]
    B[Inject Malicious Template Code]
    C[Trigger Template Execution]
    D[Gain Access to Server]
    E[Initial Access Achieved]

    A -->|"Discover template injection vulnerability Corporate Control: Web Application"| B
    A -->|"Identify areas where user input is used in templates Corporate Control: Template Engine"| B
    A -->|"Leverage tools to automate vulnerability discovery Third Party Control: Automated Scanners"| B
    A -->|"Focus on web applications using templating engines Corporate Control: Application Stack"| B
    B -->|"Craft payload with malicious template syntax Corporate Control: Exploit Development"| C
    B -->|"Ensure payload exploits code execution capabilities Corporate Control: Code Execution"| C
    B -->|"Obfuscate payload to evade detection Third Party Control: Obfuscation Tools"| C
    B -->|"Inject payload into vulnerable input fields Corporate Control: Input Fields"| C
    C -->|"Trigger execution by interacting with application Corporate Control: Application Interaction"| D
    C -->|"Ensure payload executes with desired privileges Corporate Control: Privilege Escalation"| D
    C -->|"Monitor responses for successful execution indicators Corporate Control: Execution Monitoring"| D
    C -->|"Refine payload as needed for full exploitation Corporate Control: Exploit Refinement"| D
    D -->|"Gain access to server or application data Corporate Control: Server Access"| E
    D -->|"Establish foothold for future activities Corporate Control: Initial Compromise"| E
    D -->|"Monitor for anomalies during exploitation Corporate Control: Anomaly Detection"| E
    D -->|"Patch vulnerability to prevent further abuse Corporate Control: Vulnerability Patching"| E