graph TD;
    A[Identify Template Injection in Jinja2]
    B[Inject Malicious Template Code]
    C[Trigger Execution of Template Payload]
    D[Gain Remote Code Execution]
    E[Initial Access Achieved]

    A -->|"Discover user input embedded in Jinja2 templates Corporate Control: Template Engine"| B
    A -->|"Scan for unvalidated template expressions Corporate Control: Input Validation"| B
    A -->|"Focus on applications directly rendering user input Corporate Control: Application Logic"| B
    A -->|"Use automated scanners to confirm SSTI vulnerabilities Third Party Control: Vulnerability Scanners"| B
    B -->|"Craft malicious payload exploiting Jinja2 syntax Corporate Control: Exploit Development"| C
    B -->|"Include commands for arbitrary code execution Corporate Control: Command Injection"| C
    B -->|"Obfuscate payload to avoid detection Third Party Control: Payload Obfuscation"| C
    B -->|"Test payload on isolated Jinja2 environments Corporate Control: Lab Testing"| C
    C -->|"Submit payload via vulnerable input field Corporate Control: Input Fields"| D
    C -->|"Trigger payload execution by interacting with app Corporate Control: App Interaction"| D
    C -->|"Monitor responses for execution success Corporate Control: Response Monitoring"| D
    C -->|"Refine payload to improve stealth and success Corporate Control: Payload Refinement"| D
    D -->|"Establish remote access to server Corporate Control: Remote Access"| E
    D -->|"Ensure persistence for further exploitation Corporate Control: Persistence Mechanisms"| E
    D -->|"Monitor application for detection attempts Corporate Control: Detection Avoidance"| E
    D -->|"Patch SSTI vulnerabilities post-exploitation Corporate Control: Security Updates"| E
