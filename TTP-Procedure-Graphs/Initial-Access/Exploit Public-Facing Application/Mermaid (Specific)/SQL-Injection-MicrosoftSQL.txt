graph TD;
    A[Locate SQL Injection in Microsoft SQL Server]
    B[Craft Malicious Query]
    C[Deploy Query in Vulnerable Input Field]
    D[Extract Sensitive Data from SQL Server]
    E[Initial Access Achieved]

    A -->|"Identify web applications using MS SQL Server Corporate Control: Application Discovery"| B
    A -->|"Scan for input fields vulnerable to SQL injection Corporate Control: Input Validation Testing"| B
    A -->|"Confirm backend database as MS SQL Server Corporate Control: Database Type Detection"| B
    A -->|"Focus on high-value targets like admin panels Corporate Control: Target Prioritization"| B
    B -->|"Craft malicious SQL query targeting sensitive data Corporate Control: Query Crafting"| C
    B -->|"Leverage MS SQL-specific syntax for extraction Corporate Control: Query Syntax"| C
    B -->|"Use obfuscation techniques to evade WAF Corporate Control: Obfuscation Tools"| C
    B -->|"Test query effectiveness in isolated environments Corporate Control: Testing Environment"| C
    C -->|"Inject query into web application input field Corporate Control: Input Handling"| D
    C -->|"Ensure query retrieves valid credentials Corporate Control: Credential Retrieval"| D
    C -->|"Evade detection by mimicking legitimate queries Corporate Control: Query Stealth"| D
    C -->|"Monitor for query success in application logs Corporate Control: Application Logs"| D
    D -->|"Extract sensitive information like admin credentials Corporate Control: Data Extraction"| E
    D -->|"Establish admin-level access to application Corporate Control: Admin Access"| E
    D -->|"Use extracted data for further exploitation Corporate Control: Follow-On Exploitation"| E
    D -->|"Patch vulnerabilities to prevent future SQL injection Corporate Control: Vulnerability Mitigation"| E
