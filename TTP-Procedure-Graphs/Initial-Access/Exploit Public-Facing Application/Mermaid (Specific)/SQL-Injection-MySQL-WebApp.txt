graph TD;
    A[Locate SQL Injection Point]
    B[Craft SQL Query to Dump User Credentials]
    C[Inject Query Through Login Field]
    D[Database Returns Sensitive Information]
    E[Initial Access Achieved]

    A -->|"Identify login or search fields for injection Corporate Control: Input Fields"| B
    A -->|"Test input fields for exploitable syntax Corporate Control: Syntax Validation"| B
    A -->|"Confirm database type as MySQL Corporate Control: Database Identification"| B
    A -->|"Focus on high-value targets in web apps Corporate Control: Web Application"| B
    B -->|"Craft SQL query to retrieve admin credentials Corporate Control: Query Crafting"| C
    B -->|"Encode or obfuscate payload to bypass firewalls Corporate Control: Firewall Evasion"| C
    B -->|"Ensure payload avoids triggering alerts Corporate Control: Alert Systems"| C
    B -->|"Test injection in isolated environments Corporate Control: Test Systems"| C
    C -->|"Submit query in vulnerable input field Corporate Control: Input Handling"| D
    C -->|"Ensure query retrieves valid data from database Corporate Control: Database Query Execution"| D
    C -->|"Monitor for query success and refine if needed Corporate Control: Query Refinement"| D
    C -->|"Evade detection with slow-rate attacks Corporate Control: Anomaly Monitoring"| D
    D -->|"Extract sensitive credentials from database Corporate Control: Credential Store"| E
    D -->|"Establish access to application admin functions Corporate Control: Admin Privileges"| E
    D -->|"Monitor database logs for unexpected queries Corporate Control: Query Logs"| E
    D -->|"Ensure no cleanup leads to detection Corporate Control: Post-Injection Monitoring"| E
