graph TD;
    A[Upload Trojanized Wheels to PyPI]
    B[Distribute Wheels as Dependency Updates]
    C[Developers Install Compromised Packages]
    D[Malicious Code Executes During Build]
    E[Initial Access Achieved]

    A -->|"Create trojanized wheels mimicking legitimate ones Corporate Control: Wheel Files"| B
    A -->|"Embed stealthy payloads within package scripts Corporate Control: Embedded Payloads"| B
    A -->|"Ensure metadata and signatures appear legitimate Corporate Control: Metadata"| B
    A -->|"Monitor downloads to track affected victims Corporate Control: Registry Logs"| B
    B -->|"Distribute compromised wheels via PyPI repository Corporate Control: Distribution Registry"| C
    B -->|"Test for runtime compatibility with popular frameworks Corporate Control: Testing Pipelines"| C
    B -->|"Ensure payloads evade antivirus detection Corporate Control: Security Scans"| C
    B -->|"Prepare backups for potential removal Corporate Control: Redundancy Strategies"| C
    C -->|"Developers download infected wheels for projects Third Party Control: Build Systems"| D
    C -->|"Payload activates during project compilation Third Party Control: Build Environment"| D
    C -->|"Backdoor establishes communication to C2 servers Third Party Control: Victim Networks"| D
    C -->|"Monitor for unusual developer activity Corporate Control: Activity Logs"| D
    D -->|"Malware provides attackers access to build environments Third Party Control: Developer Machines"| E
    D -->|"Initial access achieved for persistent control Third Party Control: Victim Systems"| E
    D -->|"Investigate anomalies in wheels activity Corporate Control: Threat Response"| E
    D -->|"Implement stricter wheel validation policies Corporate Control: Dependency Security"| E
