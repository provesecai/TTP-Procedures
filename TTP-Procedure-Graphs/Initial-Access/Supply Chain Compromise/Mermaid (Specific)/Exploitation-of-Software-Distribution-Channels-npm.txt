graph TD;
    A[Compromise npm Distribution Channel]
    B[Inject Malicious Code into Packages]
    C[Distribute Infected Packages to Developers]
    D[Developers Deploy Compromised Code]
    E[Initial Access Achieved]

    A -->|"Gain unauthorized access to npm accounts Corporate Control: npm Accounts"| B
    A -->|"Inject obfuscated malicious code into package scripts Corporate Control: Package Codebase"| B
    A -->|"Ensure changes evade package checks Corporate Control: Code Validation"| B
    A -->|"Monitor package downloads for targeted victims Corporate Control: Download Analytics"| B
    B -->|"Publish infected packages on npm registry Corporate Control: Registry Hosting"| C
    B -->|"Disguise changes with legitimate updates Corporate Control: Update Logs"| C
    B -->|"Target widely used dependencies Corporate Control: Dependency Libraries"| C
    B -->|"Ensure backward compatibility to evade detection Corporate Control: Versioning System"| C
    C -->|"Developers integrate infected packages into projects Third Party Control: Development Pipelines"| D
    C -->|"Malicious code activates during application runtime Third Party Control: Build Process"| D
    C -->|"Monitor unusual activity in dependent projects Corporate Control: Dependency Tracking"| D
    C -->|"Investigate unexpected dependency behavior Corporate Control: Developer Alerts"| D
    D -->|"Attackers establish access via malicious runtime execution Third Party Control: Application Environment"| E
    D -->|"Initial access achieved for further exploitation Third Party Control: Compromised Applications"| E
    D -->|"Investigate anomalies in npm registry activity Corporate Control: Threat Detection"| E
    D -->|"Enhance dependency management workflows Corporate Control: Package Auditing"| E
