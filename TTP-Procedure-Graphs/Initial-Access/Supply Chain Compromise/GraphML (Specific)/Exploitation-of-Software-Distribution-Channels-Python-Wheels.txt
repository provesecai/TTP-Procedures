<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
<graph id="Exploitation_of_Software_Distribution_Channnels_Python_Wheels" edgedefault="directed">
<!--  Nodes  -->
<node id="A">
<data key="label">Upload Trojanized Wheels to PyPI</data>
</node>
<node id="B">
<data key="label">Distribute Wheels as Dependency Updates</data>
</node>
<node id="C">
<data key="label">Developers Install Compromised Packages</data>
</node>
<node id="D">
<data key="label">Malicious Code Executes During Build</data>
</node>
<node id="E">
<data key="label">Initial Access Achieved</data>
</node>
<!--  Edges with Conditions/Weaknesses  -->
<edge source="A" target="B">
<data key="label">Create trojanized wheels mimicking legitimate ones Corporate Control: Wheel Files</data>
</edge>
<edge source="A" target="B">
<data key="label">Embed stealthy payloads within package scripts Corporate Control: Embedded Payloads</data>
</edge>
<edge source="A" target="B">
<data key="label">Ensure metadata and signatures appear legitimate Corporate Control: Metadata</data>
</edge>
<edge source="A" target="B">
<data key="label">Monitor downloads to track affected victims Corporate Control: Registry Logs</data>
</edge>
<edge source="B" target="C">
<data key="label">Distribute compromised wheels via PyPI repository Corporate Control: Distribution Registry</data>
</edge>
<edge source="B" target="C">
<data key="label">Test for runtime compatibility with popular frameworks Corporate Control: Testing Pipelines</data>
</edge>
<edge source="B" target="C">
<data key="label">Ensure payloads evade antivirus detection Corporate Control: Security Scans</data>
</edge>
<edge source="B" target="C">
<data key="label">Prepare backups for potential removal Corporate Control: Redundancy Strategies</data>
</edge>
<edge source="C" target="D">
<data key="label">Developers download infected wheels for projects Third Party Control: Build Systems</data>
</edge>
<edge source="C" target="D">
<data key="label">Payload activates during project compilation Third Party Control: Build Environment</data>
</edge>
<edge source="C" target="D">
<data key="label">Backdoor establishes communication to C2 servers Third Party Control: Victim Networks</data>
</edge>
<edge source="C" target="D">
<data key="label">Monitor for unusual developer activity Corporate Control: Activity Logs</data>
</edge>
<edge source="D" target="E">
<data key="label">Malware provides attackers access to build environments Third Party Control: Developer Machines</data>
</edge>
<edge source="D" target="E">
<data key="label">Initial access achieved for persistent control Third Party Control: Victim Systems</data>
</edge>
<edge source="D" target="E">
<data key="label">Investigate anomalies in wheels activity Corporate Control: Threat Response</data>
</edge>
<edge source="D" target="E">
<data key="label">Implement stricter wheel validation policies Corporate Control: Dependency Security</data>
</edge>
</graph>
</graphml>
